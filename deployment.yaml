apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  namespace: default
  labels:
    app: web-app
spec:
  replicas: 4 # 4 реплики по результатам нагрузочного теста
  revisionHistoryLimit: 10 # Храним историю ревизий для отката
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25% # Постепенное обновление для минимизации простоя
      maxUnavailable: 25%
  
  selector:
    matchLabels:
      app: web-app
  
  template:
    metadata:
      labels:
        app: web-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    
    spec:
      # Распределение подов по зонам для отказоустойчивости
      topologySpreadConstraints:
      - maxSkew: 1 # Максимальная разница в количестве подов между зонами
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway # Всегда планировать, даже если невозможно идеально распределить
        labelSelector:
          matchLabels:
            app: web-app
      
      # Анти-аффинити для распределения подов по разным нодам
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: web-app
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: web-app
        image: your-web-app:latest
        imagePullPolicy: IfNotPresent
        
        # Ресурсы с учетом характеристик приложения
        resources:
          requests:
            memory: "128Mi" # Базовая потребность в памяти
            cpu: "100m"     # Базовое потребление CPU после инициализации
          limits:
            memory: "256Mi" # Лимит с запасом
            cpu: "500m"     # Лимит для обработки пиковых нагрузок при старте
        
        # Проверки жизнеспособности
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15 # Даем время на инициализацию (5-10 сек + запас)
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 12 # Чуть меньше чем liveness, чтобы начать принимать трафик раньше
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        
        # Стартовая проверка
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          failureThreshold: 30 # 30 попыток = 150 секунд максимум
          periodSeconds: 5     # Проверяем каждые 5 секунд
        
        ports:
        - containerPort: 8080
          name: http
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web-app-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-app
  
  minReplicas: 2 # Минимум 2 реплики ночью для отказоустойчивости
  maxReplicas: 6 # Максимум 6 реплик днем для обработки пиковой нагрузки
  
  # Метрики для автомасштабирования
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60 # Целевая утилизация CPU 60%
  
  behavior:
    # Настройки масштабирования вверх
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60
      - type: Percent
        value: 100
        periodSeconds: 60
      selectPolicy: Max
    
    # Настройки масштабирования вниз (более консервативные)
    scaleDown:
      stabilizationWindowSeconds: 300 # Длинное окно для избежания флуктуаций
      policies:
      - type: Pods
        value: 1
        periodSeconds: 300
      selectPolicy: Max
---
apiVersion: v1
kind: Service
metadata:
  name: web-app-service
  namespace: default
  labels:
    app: web-app
spec:
  selector:
    app: web-app
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  
  type: ClusterIP # Внутренний сервис, для внешнего доступа используем Ingress
